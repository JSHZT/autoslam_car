// Generated by gencpp from file obrobot_navigation/PoseManageRequest.msg
// DO NOT EDIT!


#ifndef OBROBOT_NAVIGATION_MESSAGE_POSEMANAGEREQUEST_H
#define OBROBOT_NAVIGATION_MESSAGE_POSEMANAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <obrobot_navigation/PoseOperation.h>

namespace obrobot_navigation
{
template <class ContainerAllocator>
struct PoseManageRequest_
{
  typedef PoseManageRequest_<ContainerAllocator> Type;

  PoseManageRequest_()
    : poseoperation()  {
    }
  PoseManageRequest_(const ContainerAllocator& _alloc)
    : poseoperation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::obrobot_navigation::PoseOperation_<ContainerAllocator>  _poseoperation_type;
  _poseoperation_type poseoperation;





  typedef boost::shared_ptr< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PoseManageRequest_

typedef ::obrobot_navigation::PoseManageRequest_<std::allocator<void> > PoseManageRequest;

typedef boost::shared_ptr< ::obrobot_navigation::PoseManageRequest > PoseManageRequestPtr;
typedef boost::shared_ptr< ::obrobot_navigation::PoseManageRequest const> PoseManageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace obrobot_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'obrobot_navigation': ['/home/pi/autoslam_gm/src/obrobot_navigation/msg', '/home/pi/autoslam_gm/src/obrobot_navigation/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c9db663067220fe547812392b537bd8";
  }

  static const char* value(const ::obrobot_navigation::PoseManageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c9db663067220feULL;
  static const uint64_t static_value2 = 0x547812392b537bd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obrobot_navigation/PoseManageRequest";
  }

  static const char* value(const ::obrobot_navigation::PoseManageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obrobot_navigation/PoseOperation poseoperation\n\
\n\
================================================================================\n\
MSG: obrobot_navigation/PoseOperation\n\
string opt\n\
uint32 id\n\
string name\n\
string type\n\
uint32 floor\n\
";
  }

  static const char* value(const ::obrobot_navigation::PoseManageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poseoperation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseManageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obrobot_navigation::PoseManageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obrobot_navigation::PoseManageRequest_<ContainerAllocator>& v)
  {
    s << indent << "poseoperation: ";
    s << std::endl;
    Printer< ::obrobot_navigation::PoseOperation_<ContainerAllocator> >::stream(s, indent + "  ", v.poseoperation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBROBOT_NAVIGATION_MESSAGE_POSEMANAGEREQUEST_H
