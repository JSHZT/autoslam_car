# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from obrobot_navigation/PoseManageRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import obrobot_navigation.msg

class PoseManageRequest(genpy.Message):
  _md5sum = "1c9db663067220fe547812392b537bd8"
  _type = "obrobot_navigation/PoseManageRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """obrobot_navigation/PoseOperation poseoperation

================================================================================
MSG: obrobot_navigation/PoseOperation
string opt
uint32 id
string name
string type
uint32 floor
"""
  __slots__ = ['poseoperation']
  _slot_types = ['obrobot_navigation/PoseOperation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poseoperation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseManageRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.poseoperation is None:
        self.poseoperation = obrobot_navigation.msg.PoseOperation()
    else:
      self.poseoperation = obrobot_navigation.msg.PoseOperation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.poseoperation.opt
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.poseoperation.id))
      _x = self.poseoperation.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.poseoperation.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.poseoperation.floor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.poseoperation is None:
        self.poseoperation = obrobot_navigation.msg.PoseOperation()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.opt = str[start:end].decode('utf-8')
      else:
        self.poseoperation.opt = str[start:end]
      start = end
      end += 4
      (self.poseoperation.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.name = str[start:end].decode('utf-8')
      else:
        self.poseoperation.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.type = str[start:end].decode('utf-8')
      else:
        self.poseoperation.type = str[start:end]
      start = end
      end += 4
      (self.poseoperation.floor,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.poseoperation.opt
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.poseoperation.id))
      _x = self.poseoperation.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.poseoperation.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.poseoperation.floor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.poseoperation is None:
        self.poseoperation = obrobot_navigation.msg.PoseOperation()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.opt = str[start:end].decode('utf-8')
      else:
        self.poseoperation.opt = str[start:end]
      start = end
      end += 4
      (self.poseoperation.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.name = str[start:end].decode('utf-8')
      else:
        self.poseoperation.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poseoperation.type = str[start:end].decode('utf-8')
      else:
        self.poseoperation.type = str[start:end]
      start = end
      end += 4
      (self.poseoperation.floor,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from obrobot_navigation/PoseManageResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import obrobot_navigation.msg

class PoseManageResponse(genpy.Message):
  _md5sum = "3ee0d3f1402669f95ae05bb612a861fa"
  _type = "obrobot_navigation/PoseManageResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string status
obrobot_navigation/PoseDefine posedefine


================================================================================
MSG: obrobot_navigation/PoseDefine
uint32 id
string name
string type
uint32 floor
geometry_msgs/Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['status','posedefine']
  _slot_types = ['string','obrobot_navigation/PoseDefine']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,posedefine

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseManageResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
      if self.posedefine is None:
        self.posedefine = obrobot_navigation.msg.PoseDefine()
    else:
      self.status = ''
      self.posedefine = obrobot_navigation.msg.PoseDefine()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.posedefine.id))
      _x = self.posedefine.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.posedefine.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7d().pack(_x.posedefine.floor, _x.posedefine.pose.position.x, _x.posedefine.pose.position.y, _x.posedefine.pose.position.z, _x.posedefine.pose.orientation.x, _x.posedefine.pose.orientation.y, _x.posedefine.pose.orientation.z, _x.posedefine.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.posedefine is None:
        self.posedefine = obrobot_navigation.msg.PoseDefine()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (self.posedefine.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.posedefine.name = str[start:end].decode('utf-8')
      else:
        self.posedefine.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.posedefine.type = str[start:end].decode('utf-8')
      else:
        self.posedefine.type = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.posedefine.floor, _x.posedefine.pose.position.x, _x.posedefine.pose.position.y, _x.posedefine.pose.position.z, _x.posedefine.pose.orientation.x, _x.posedefine.pose.orientation.y, _x.posedefine.pose.orientation.z, _x.posedefine.pose.orientation.w,) = _get_struct_I7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.posedefine.id))
      _x = self.posedefine.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.posedefine.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7d().pack(_x.posedefine.floor, _x.posedefine.pose.position.x, _x.posedefine.pose.position.y, _x.posedefine.pose.position.z, _x.posedefine.pose.orientation.x, _x.posedefine.pose.orientation.y, _x.posedefine.pose.orientation.z, _x.posedefine.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.posedefine is None:
        self.posedefine = obrobot_navigation.msg.PoseDefine()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (self.posedefine.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.posedefine.name = str[start:end].decode('utf-8')
      else:
        self.posedefine.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.posedefine.type = str[start:end].decode('utf-8')
      else:
        self.posedefine.type = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.posedefine.floor, _x.posedefine.pose.position.x, _x.posedefine.pose.position.y, _x.posedefine.pose.position.z, _x.posedefine.pose.orientation.x, _x.posedefine.pose.orientation.y, _x.posedefine.pose.orientation.z, _x.posedefine.pose.orientation.w,) = _get_struct_I7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I7d = None
def _get_struct_I7d():
    global _struct_I7d
    if _struct_I7d is None:
        _struct_I7d = struct.Struct("<I7d")
    return _struct_I7d
class PoseManage(object):
  _type          = 'obrobot_navigation/PoseManage'
  _md5sum = 'ced5f2372deedb2a41f03ed0ae9a8337'
  _request_class  = PoseManageRequest
  _response_class = PoseManageResponse
